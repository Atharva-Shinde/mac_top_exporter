package main

import (
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	flag.Parse()
	createFile()
	//TODO: exporting metrics to prometheus
	// create a new prometheus registry to store collectors
}

func createFile() {
	usr, err := os.UserHomeDir()
	if err != nil {
		fmt.Print(err)
	}
	filePath := filepath.Join(usr, "Desktop")

	// createfile, err := os.OpenFile(filepath.Join(filePath, "output.txt"), os.O_RDWR|os.O_CREATE, 0644)
	absPath := filepath.Join(filePath, "output.txt")
	createfile, err := os.Create(absPath)
	if err != nil {
		fmt.Print(err)
	}
	fmt.Print(createfile)

	populater(usr, filePath, absPath)
}

// populates output.txt file with metrics from top utility
// this function extracts pid,cpu metrics but it can track other metrics as well, to see options available try `top --help`
func populater(usr, filePath, absPath string) {
	getrawstats := exec.Command("top", "-l1", "-s3", "-n10", "-stats", "pid,command,cpu,ppid,instrs,cycles,csw,time")
	output, err := getrawstats.CombinedOutput()
	if err != nil {
		fmt.Print(err)
	}
	// fmt.Print(string(output))

	rawpopulate := os.WriteFile(absPath, output, 0755)
	if err != nil {
		fmt.Print(err)
	}
	fmt.Print(rawpopulate)

	//you can comment this function if you want to keep the summary information generated by top command at every call
	extractmetrics(absPath)

}

// this function deletes the summary information generated by top command and extracts needed metrics
func extractmetrics(absPath string) {
	skimmedstats := exec.Command("sed", "1,10d", absPath)
	finaloutput, err := skimmedstats.CombinedOutput()
	if err != nil {
		fmt.Print(err)
	}

	finalpopulate := os.WriteFile(absPath, finaloutput, 0755)
	if err != nil {
		fmt.Print(err)
	}

	fmt.Print(finalpopulate)
}
